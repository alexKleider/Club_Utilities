# File: restoreREADME
#    -located within the git repository.


Guide to Cloning the Repository and Restoring Backed up Data
============================================================

    $ cd  # Begin from within your home directory (~/).
    $ mkdir Mnt  # Create a mount point for non repo data.[1]
    $ su -  # Mounting requires root privileges.
    # cd ~<username>/   # Get root into your home directory.
    ## Assuming backup media is assigned to /dev/sdb1...
    # mount /dev/sdb1 Mnt
    # exit   # No need for root privileges (unitl umounting.)
    $ LAST=`cat Mnt/Club/last`  # Pick up date of last backup.
    $ mkdir Club  # Pick a project name & create a directory for it.
    $ cd Club   # Move into the project directory.
    $ git clone https://github.com/alexKleider/Club_Utilities
    ## Alternate URL: git@github.com:alexKleider/Club_Utilities.git
    $ mv Club_Utilities Utils  # Repos is cloned and renamed.
    $ cp -a ~/Mnt/Club/${LAST}/* ./  # Copy bu data => proj dir.
    #
    ## Now we deal with directories that live within the repo
    ## directory but are excluded by git:
    ls -lA Archives/Data  # Note the <most-recent-time-stamp>.
    cp -a Archives/Data/<most-recent-time-stamp>.tar.gz ./
    $ tar xvzf <most-recent-time-stamp>.tar.gz
    $ rm  <most-recent-time-stamp>.tar.gz
    $ ls -lA <most-recent-time-stamp>  # A sanity check!
    $ mv <most-recent-time-stamp>/* Utils/
    $ rmdir <most-recent-time-stamp>   # No need for empty directory.
    $ cd Utils
    $ cp -a Notes/Mail/Dot/\. ~/  # Move dot files [2]
    $ cp ../exclude .git/info/  # Copy exclude file into git repo.
    $ workon p37  # Activate the venv.[3]
    $ pip install -r requirements.txt  # Bring in dependencies.[4]
        # Note: only docopt is needed.
        # Others were brought in during the attempt to automate
        # retrieval of the gmail contacts listing but have since
        # been deleted.
    $ .utils.py ?


[1] WARNING: Do NOT mount the backup media onto a mount point within
the project directory, especially when doing back up!
Create and Use ~/Mnt
    $ mkdir ~/Mnt
    # mount
Otherwise you'll get a recusive backup!!!

[2] The dot files have passwords redacted.  This will have to be
corrected before emailing will work.  For the Club gmail account:
    $ echo rodandboat123 > ~/.pw.clubg
See dot_files.py to help out with these security issues.

[3] This assumes virtualenvwrapper has been installed and configured
and the p37 venv has been created. (The following is exerpted from 
/home/alex/Notes/Installs/virtualenvwrapper.)
https://medium.com/@gitudaniel/installing-virtualenvwrapper-for-python3-ad3dfea7c717
    # apt install python3-pip
    $ pip3 install --user virtualenvwrapper
Note: listing of ~/.local/bin now yields:
-rwxr-xr-x 1 alex alex   214 Oct 16 16:25 pbr
-rwxr-xr-x 1 alex alex   241 Oct 16 16:25 virtualenv
-rwxr-xr-x 1 alex alex   217 Oct 16 16:25 virtualenv-clone
-rwxr-xr-x 1 alex alex  2210 Oct 16 16:25 virtualenvwrapper_lazy.sh
-rwxr-xr-x 1 alex alex 41703 Oct 16 16:25 virtualenvwrapper.sh
Edit ~/.bashrc
export WORKON_HOME="$HOME/.virtualenvs"
export VIRTUALENVWRAPPER_VIRTUALENV="$HOME/.local/bin/virtualenv"
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
source $HOME/.local/bin/virtualenvwrapper.sh
    $ mkdir ~/.virtualenvs
    $ source ~/.bashrc
    $ mkvirtualenv -p python3.7 p37  # --python="/usr/bin/python3" p3
    $ workon p37
    $ workon    # without a param: lists available venvs.
    $ deactivate

[4] This only needs to be done once.



To Udate an Already Set up Repo and its Data
============================================

Update Files Kept in the Repository
-----------------------------------
    $ cd <project_directory>/<repository>  # ~/Club/Utils
    $ git stash  # If you want to save any repo changes.[1]
    $ git reset HEAD --hard  # Destroys any changes to repo files.
    $ git pull   # Pulls in any changes to the repo from github.
    ## At this point your repo is up to date with github

Update Files from Backup (those not kept in the repo.)
------------------------------------------------------
    ## Assume existence of ~/Mnt to serve as a mount point.
    $ su -  # Need root privileges to mount backup thumb drive.
    # mount /dev/sdb1 ~user/Mnt  # insert user name for 'user'
    # exit   # No need for root privileges (until time to 'umount'.)
    $ cd <project_directory>/<repository>  # ~/Club/Utils
    $ ls -lA ~/Mnt  # Note most recent date/directory name.
    $ ls -lA ~/Mnt/<latest-date>    # Sanity check.
    $ ls -lA ../  # Output should be similar to that of above command.
    $ rsync -av ~/Mnt/<latest-date>/ ../

After the above is done, your files should be in the same state
as that of your co-conspirators (unless one or more of them has
made changes since last backing up.

Backed up data is also kept on the Club's Google Drive:
MyDrive > Membership > Data > <date-stamp> (from external media backup)
and
MyDrive > Membership > Data > Data > <date-stamp>.tar.gz (from ../Archives/Data)


[1] If changes are stashed, they can be later added. (Conflicts may
need to be resolved.) May then wish to issue a pull request.
See https://git-scm.com/docs/git-stash for details.

# File: README.rst

==========
Background
==========

This 'README' pertains to utils.py and associated modules:

-   content.py

-   data.py

-   helpers.py

-   member.py

-   rbc.py  (imported as club)

-   Bashmail.send.py

-   Pymail.send.py

This project can be found at
https://github.com/alexKleider/Club_Utilities
(It's dependencies are discussed at the end of this document.)

For a succinct response, try..
  ``./utils.py ?``
or, for more information..
  ``./utils.py -h | pager``

The project arose to facilitate my duties when appointed membership
secretary to the Bolinas Rod & Boat Club.  It may be of use
(undoubtedly with modifications) to someone else working on behalf
of some other organization.


==============================================
Directory Structure, Backup and Privacy Issues
==============================================

There is the *project directory* (in my case it's **~/Git/Club**)
and within it is the *repo* (**Club_Utilities** which I've renamed
**Utils**.) Within the project directory there are other directories
pertaining to the Club but only one is relevant to the code;
it's the **Archive** directory which is maintained for backup
and historical purposes.

Current Club data is maintained within *excluded* (they are listed
in the **.git/info/exclude** file) subdirectories of the
*repo* directory. The
**archive_data.sh** script does a backup of this data into the
**Archives** directory and the **backup.sh** script provides backup
onto mounted backup media. Consult those scripts and the
**restoreREADME** file for details.

The code is backedup by git.


====
Data
====

The following files contain current club data; all (except the
last) are found within the **Data** subdirectory of **Utils**.


- memlist.csv  # the Club's main data base

    Its fields/headers are:
    first,last,phone,address,town,state,postal_code,country,email,email_only,dues,mooring,dock,kayak,status
    The first 10 fields are self explanatory.
    The 'email_only' field is now rather redundant since it is blank only
    for those with a blank email field.  My long range plan is to
    eliminate this field.
    The next 4 fields are the member.money_kyes.
    The final "status" field provides a place for added info. (See
    member.status_key_values for further detail.)

- applicants.txt  # a SPoT file  [1]

    This is where I've been keeping a record of applicants for Club
    membership along with dates of application, payment of application
    fee, dates of required three meetings and date of induction by the
    Executive Committee.

- extra_fees.txt  # a SPoT file [1]

    The Club offers kayak storage, dock usage and mooring for some members
    at an extra charge. This file maintains the record of who is paying
    for what extra. (extra_fees.json is generated by ... and used by
    ...)

- receipts-<year>.txt

    This file is used to keep track of incoming fees. When ever money
    comes in (pertaining to Membership) an entry is made.  The format to
    which it must conform is described in the docstring of the fees_intake
    method.

- ~/Downloads/contacts.csv  # exported from the clubs gmail account

    This (contacts.csv) file can be downloaded from the Cub's Gmail account.
    It is used to check for data integrity by the 'ck_data' sub-command. 


=====================
Bash Script Utilities
=====================

The bash script utilities are commented and should be self explanatory. 
More information is provided in the next section: Archiving and
Backup.

- archive-data.sh

- archive-mailing.sh

- backup.sh

- utils-completion.bash  (still a work in progress.)



=============================================
Further Notes Pertaining Largely to Work Flow
=============================================

------------------
ARCHIVING & BACKUP
------------------

Code is backed up at https://github.com/alexKleider/Club_Utils.
Data is archived (to preserve an historical record) to the
**Archive** sister directory which in turn can be backed up to an
external hard drive or an USB stick.
Each backup takes the form of a directory named by a time stamp.
As of Sun 21 Jun 2020 a copy is being kept on the Clubs google Drive:
Drive/Membership/Archives/...

---------
WORK FLOW
---------

I keep the project at **~/Git/Club**.
The code is within a subdirectory of this project directory. It is
a git repository: https://github.com/alexKleider/Club_Utilities which
I rename **Utils**.

Work is done from within the repo directory: 'Utils'.
Backups should be done at regular intervals using the following
scripts (which might have to be modified slightly with regard
to file names:)

-  archive_mailings.sh (after every mailing)

-  archive_data.sh

-  backup.sh


The **prepare_mailing** command is implemented (as are some others)
by having a single traversing command which takes a custom function
(or list of custom functions) as its parameter and this/these
function(s) deal(s) with each record traversed adding data as needed
to one or more corresponding attribute(s) of an instance of the
**rbc.Club** class.  It generates a directory and a *json* file:

1. **./Data/MailingDir/** 

   This directory contains the letters generated to be printed,
   folded, inserted into windowed envelopes and mailed.

   ``$ lpr Data/MailingDir/*``

   rather than bother with the ./utils.py print_letters command.

2. **emails.json**

   This json file contains a list of dicts, each of which represents
   an email to be sent.  A human readable version of such a file can
   be generated as follows:

   ``$ ./utils.py display_emails ...``


  ``$ ./utils.py send_emails ...``


 Note: The send_emails functionality depends on the
 presence of a ~/.msmtprc configuration file
 and lowering the gmail account security setting:
 https://myaccount.google.com/lesssecureapps

Once the above is all done, the mailings can be archived using the
archive-mailings.sh script.


------------
Applications
------------

New applications are mannually entered in three locations:
1. Data/memlist.csv
2. Data/applicants.txt
3. gmail contacts (and put her/him into applicant listing)


-----------------------
Induction to Membership
-----------------------

Change ai status to m, send mailing (--which welcome2full_membership),
and then clear status field.
Complete line in Data/applicants.txt.
Change gmail contact removing from applicant and adding to LIST group


---------
Attrition
---------

Remember to move line from Data/memlist.csv into Info/attrition
and remove contact from gmail contacts


-----------------------------------------
Payment of Dues/Acknoledgement of payment
-----------------------------------------

When people pay, I've been doing the following:

1  Edit **Info/2thank.csv**

   'copy'ing their line in the **Data/memlist.csv** file and
   appending it to a **Info/2thank.csv file which can then be used
   as input to the **perpare_mailing** command when enough accumulate
   to make it worth while.  Be sure to delete the records after
   doing the mailing!

2  Edit **Data/memlist.csv**

   Zero out or otherwise modify the *dues* &/or *fees* fields as
   appropriate.

3  Edit **Data/receipt<year>.csv**

   Running totals can be maintained with the help of the
   **fee_intake_totals** command.


--------------
Sending Emails
--------------

Initially gmail was used to send out mass mailings and its use is the
default method.  Lowering the security setting is required to do this
and there is no possibility of adding a 'Reply-To' field.  Use of my
EasyDNS account (alex@kleider.ca) is an alternative (specified by the
'-E' option.)

------------
DEPENDENCIES
------------

See requirements.txt. Only the first item is required for current
usage.  I believe (but am not completely certain) that the others were
added in my (failed) attempt to automate the exportation of google
contacts.
'docopt' is not part of the Python standard library but is available
using pip.  It is recommended to use pip in the following manner:

    ``$ python3 -m pip install docopt``

Also required is msmtp along with a custom ~/.msmtprc configuration
file.  (I think this is only true for gmail mailings, not for
EasyDNS.)

    ``# apt install msmtp``

The ~/.msmtprc is in the following format:

.. code-block::

    # see:
    # https://websistent.com/how-to-use-msmtp-with-gmail-yahoo-and-php-mail/
    defaults
    protocol smtp
    auth on
    tls_starttls on
    tls on
    # tls_nocertcheck
    tls_trust_file /etc/ssl/certs/ca-certificates.crt
    logfile ~/.msmtp.log

    account gmail
    host smtp.gmail.com
    port 587
    user rodandboatclub@gmail.com
    from "rodandboatclub@gmail.com"
    password "REDACTED"

    # parts added when the above didn't work:
    # $ cat demo_email | msmtp -a gmail akleider@sonic.net
    # msmtp: account gmail from /home/alex/.msmtprc: tls requires either
    # tls_trust_file (highly recommended) or tls_fingerprint or a disabled
    # tls_certcheck
    # Working but only because "Allow less secure apps: ON"
    # This can be changed here:
    # https://myaccount.google.com/lesssecureapps?rfn=27&rfnc=1&eid=8982448633122002402&et=0&asae=2&pli=1

==============
Redacted Parts
==============

Within utils.py, the 'labels', 'envelopes', 'email_billings2json',
and 'usps_billings2print' commands have been pretty much deprecated
and may soon disappear.
Billing is now done using the 'prepare_mailing' command.

==========
Foot Notes
==========

[1] Acronyms:

- "SPoT" <= Single Point of Truth; applying the DRY principle.

- "DRY" <= Donnot Repeat Yourself

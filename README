# File: README

This 'readme' pertains to utils.py and associated modules:
    helpers.py
    member.py
    content.py

This project can be found at
    https://github.com/alexKleider/Club_Utilities

Try..
  ./utils.py -h  # very verbose,
or simply
  ./utils.py ?  # more succinct.

It provides functionality related to my position as membership
secretary to the Bolinas Rod & Boat Club.

Of necessity, Club records must be kept private and are found in the
'Data' subdirectory which is excluded from the git repository and
contains the following files:

 1. memlist.csv is the Club's main data base:
Its fields/headers are:
first,last,phone,address,town,state,postal_code,country,email,email_only,dues,mooring,dock,kayak,status
The first 10 fields are self explanatory.
The 'email_only' field is now rather redundant since it is blank only
for those with a blank email field.
The next 4 fields are the member.money_kyes.
The final "status" field provides a place for added info. (See
member.status_key_values for further detail.)

 2. applicants.txt
 3. extra_fees*
 4. google.csv (imported from the clubs gmail account)
 5. receipts**-**.txt

The bash script utilities should be self explanatory. They include
    archive-data.sh
    archive-mailing.sh
    backup.sh

Comments, suggestions, criticisms ==> alexKleider@gmail.com


Other notes (largely pertaining to work flow:)

PRINTING LETTERS:
How to make letters 'fit' the windowed envelopes seems to be printer
dependent!  A <content.printer> dict has been set up to solve this
problem.  Making the first fold along the bottom of the
"Dear {recipient}" line has been working well.

ARCHIVING & BACKUP
==================

Code is backed up here: https://github.com/alexKleider/Club_Utils
Data is archived (to preserve an historical record) to the Archive
sister directory and also backed up to an external hard drive.

WORK FLOW:
The project can be found under the /home/alex/Club/Mshp
(formerly /home/alex/Notes/Bo/Club/Mshp) directory which is a git
repository contianing utils.py and supporting files (all backed up
on github: https://github.com/alexKleider/Club_Utilities.)
The club data within this directory is (for privacy reasons)
excluded from github and archived in the 'Data' subdirectory of the
'Archive' directory (see archive-data.sh.) It consists of the following:
    applicants.csv,  # The SPoT for applicants demographics
    applicants.txt,  # The SPoT for applicant status.
    extra_fees.txt,  # The SPoT for dock, mooring and kayak storage.
    memlist.csv,  # The main membership data base.
    receipts*,  # Money taken in (by membership year.)
    report*     # One for every month.
These are edited using vim (or any editor of your choosing) and
are copied (archive.sh) to the Archive directory from time to time
(at a minimum after each meeting, to provide an historical record.)

Also archived are mailings: see archive-mailing.sh.  This should be
done after each time letters/emails are sent out.

Redacted Parts
-------------

Within utils.py, the 'labels', 'envelopes', 'email_billings2json',
and 'usps_billings2print' commands have been pretty much deprecated.
Billing is now done using the 'prepare_mailing' command.

As of late Aug/early Sept 2018 most commands are implemented by
having a single traversing command which takes a custom function
(or list of custom functions) as its parameter and this/these
function(s) deal(s) with each record traversed adding data as needed
to one or more corresponding attribute(s) of the Membership instance.
The command is 'prepare_mailing'.
It results in
1. a directory (./Data/MailingDir/) full of individual
letters to be printed, folded, inserted into windowed envelopes and
mailed.  I simply use the command line to issue the following:
  $ lpr Data/MailingDir/*
rather than bother with the ./utils.py print_letters command.
.. and 2. a file emails.json which can be processed using the 
  $ ./utils.py display_emails ...
command to allow a visual check before actually sending the emails
using the 
  $ ./utils.py send_emails ...
command.
    Note: The send_emails functionality depends on the
    presence of a ~/.msmtprc configuration file
    and lowering the gmail account security setting:
    https://myaccount.google.com/lesssecureapps
Once the above is all done, the mailings can be archived using the
archive-mailings.sh script.


Early Payment of Dues/Acknoledgement of payment
-----------------------------------------------
When people pay, I've been 'copy/past'ing their line in the
memlist.csv file into the payed.csv file until enough accumulate to
make it worth while sending out the thank_you_for_payment letter after
which I zero out the entries in the latter.


Re: utils.py and what goes with it in the club_utils repository.

This repository was begun to provide './label.py' (which no longer
exists.) It grew out of my frustration over not being able to print
labels from a spredsheet (in my capacity as newly appointed Membership
Secretary for a local club.) It has since grown into a bigger project
that provides many things all under the umbrella of ./utils.py: try...
  ./utils.py -h  # very verbose,
or simply
  ./utils.py ?  # more succinct.

It provides functionality related to my position as membership
secretary (to the Bolinas Rod & Boat Club.) The Clubs main data base
is the 'memlist.csv' file, hidden from the git repo for privacy
reasons.  Other files also in the same category (i.e. private)
include 'google.csv' (imported from the clubs gmail account,)
'applicants*', 'extra_fees*', and perhaps a few more. See 'archive.sh'
and 'backup.sh' for more info.

Comments, suggestions, criticisms ==> alexKleider@gmail.com


Other notes (largely to myself:)

FOLDING LETTERS:
How to make letters 'fit' the windowed envelopes seems to be printer
dependent!  Hence we should probably set up a 'PrinterSpecs' class;
For now, note that for the printer in the Bolinas data closet:
The sender's address and recipient's address and the "Dear" line
should begin on lines 6, 15 and 23 respectively.
Lines should be indented 8 spaces.
A date can be on line 11.
A "Re: {subject}" line is best on line 21.
If one places "Dear {recipient}" on line 23 then making
the first fold through it will make the appropriate
text line up nicely inside the envelope windows.

ARCHIVING & BACKUP
==================

Code is backed up here: https://github.com/alexKleider/Club_Utils
Data is archived (to preserve an historical record) to the Archive
sister directory and also backed up to an external hard drive.

WORK FLOW:
The project can be found under the /home/alex/Club/Mshp
(formerly /home/alex/Notes/Bo/Club/Mshp) directory.
Under it, the Py directory is a git repository contianing utils.py
and supporting files (all backed up on github:
https://github.com/alexKleider/Club_Utilities.)
The club data within this directory is (for privacy reasons)
excluded from github and archived in the 'Data' subdirectory of the
'Archive' directory (see archive-data.sh.) It consists of the following:
    applicants.csv,  # The SPoT for applicants demographics
    applicants.txt,  # The SPoT for applicant status.
    extra_fees.txt,  # The SPoT for dock, mooring and kayak storage.
    memlist.csv,  # The main membership data base.
    receipts*,  # Money taken in (by membership year.)
    report*     # One for every month.
These are edited using vim (or any editor of your choosing) and
are copied (archive.sh) to the Archive directory from time to time
(at a minimum after each meeting, to provide an historical record.)

('newmembers' is a link to ../Lists/newmembers in which I keep track
of new members and my reports to leadership and members. It is likely
to be soon redacted.)

Also archived are mailings: see archive-mailing.sh.  This should be
done after each time letters/emails are sent out.

Data backup is accomplished by backing up the 'Mshp' directory
excluding its 'Py' subdirectory to an external drive using the
backup.sh utility.


Redacted Parts
-------------

Within utils.py, the 'labels', 'envelopes', 'email_billings2json',
and 'usps_billings2print' commands have been pretty much deprecated.
Billing is now done using the 'prepare_mailing' command. It depends
on other infrastructure found in the ./Formats/content.py file which
needs to be edited to suit current need. Specifically the two
variables 'content' and 'custom_func' need to be defined and assigned.

As of (late Aug/early Sept 2018) most commands are implemented by
having a single traversing command which takes a custom function
(or list of custom functions) as its parameter and this/these
function(s) deal(s) with each record traversed adding data as needed
to one or more corresponding attribute(s) of
the Membership instance.  (version 1.0.1a) The command is
'prepare_mailing'


Developments
------------

Special Note Regarding Mailings:
    Sending of emails and letters is done as a two stage process
in order to allow for proof reading.  Once checked, the send_emails
and print_letters commands can be used to complete the process.
Here is the suggested sequence:
    # Export all contacts from gmail account => google.csv
    ./utils.py compare_gmail google.csv -i memlist.csv -o results -j json2send
    # Edit data as appropriate.
    # Run a command that sends the emails to a file named json2send,
    # typically:
    ./utils.py billing -i memlist.csv  -j json2send --dir Billings
    ./utils.py display -i json2send -o json2check
    # Use vim to check the files in the Billings directory and also
    # the json2check file.  Then procede with:
    ./utils.py send_emails -i json2send
    ./utils.py print_letters --dir Billings
The send_emails functionality depends on the presence of
a ~/.msmtprc (configuration) file.
# https://websistent.com/how-to-use-msmtp-with-gmail-yahoo-and-php-mail/

After mass mailings I've been running archive-mailing.sh which zipps the
content to an ../Archives/Mailling/z<YYYY-MM-DD>.zip file which contains
a directory containing the letters and an 'emails.json' file (the emails.)


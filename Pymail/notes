https://en.wikipedia.org/wiki/Transport_Layer_Security
SSL (Secure Sockets Layer) is a deprecated predcessor to 
TLS (Transport Layer Security)
Two layers/protocols:
TLS record & TLS handshake
Client indicates desired setup of TLS to server:
    Specific port number (eg 443 for HTTPS) or
    Protocol specific request: eg STARTTLS request
Client and Server negotiate a stateful connection (handshaking)
    using an asymmetric cipher to establish:
    1. cipher settings
    2. session-specific shared key with which further communication
    is encrypted using a symmetric cipher
    Client presents a list of supported cipher suites (ciphers & hash
    functions.)

https://realpython.com/python-send-email

Gmail emulation of multiple addresses all pointing to same inbox:
my+person1@gmail.com & my+person1@gmail.com both go to my@gmail.com

Allow less secure apps ==> ON
or: use the OAuth2 authorization framework:
https://developers.google.com/gmail/api/quickstart/python

May set up a local smtp server:
$ sudo python -m smtpd -c DebuggingServer -n localhost:1025

Starting a Secure SMTP Connection:
SSL (Secure Sockets Layer)
TLS (Transport Layer Security) 
Two ways:
1. use SMTP_SSL() secured from beginning; (gmail: port 465)
2. begin unsecured SMTP connection that is
then encrypted using .starttls(). (gmail: port 587)
In both instances gmail will encrypt using TLS.
Highly recommended to use ssl.create_default_context()
which will:
1. load the system's trusted CA certificates,
2. enable host name checking and certificate validation, and
3. try to choose reasonably secure protocol and cipher settings.
"smtplib" is Python's module for sending emails to any SMTP or ESMP
listener daemon.

===============================================================
## Option 1: Using SMTP_SSL()

import smtplib
import ssl

port = 465  # Std port for SMTP over SSL
password = input("Type your password followed by enter: ")

# Create a secure SSL context
context = ssl.create_default_context()

with smtplib.SMTP_SSL("smtp.gmail.com", port,
                        context=context) as server:
    server.login("my@gmail.com", password)
    # TODO: Send email here

===============================================================
## Option 2: Using .starttls()

import smtplib
import ssl

smtp_server = "smtp.gmail.com"
port = 587  # Std port for TLS
sender_email = "my@gmail.com"
password = input("Type your password followed by enter: ")

# Create a secure SSL context
context = ssl.create_default_context()

# Try to log in to server and send email
try:
    server = smtplib.SMTP(smtp_server, port)
    server.ehlo()  # Can be omitted  ?? .helo() (SMTP)
    server.starttls(context=context)  # Secure the connection
    server.ehlo()  # Can be omitted  ?? .ehlo() (ESMTP)
    server.login(sender_email, password)
    # TODO: Send email here
except Exception as e:
    # Print any error messages to stdout
    print(e)
finally:
    server.quit()

===============================================================
===============================================================

sender_email = "my@gmail.com"
receiver_email = "your@gmail.com"
message = """\
Subject: Hi there

This message is sent from Python."""

# Send email here
server.sendmail(sender_email, receiver_email, message)


================================================================

https://www.freecodecamp.org/news/send-emails-using-code-4fcea9df63f/

itâ€™s not possible to send an email message using the email package
alone. You need a combination of both email and smtplib.

Four Basic Steps:
1.  Set up the SMTP server and log into your account.
2.  Create the MIMEMultipart message object and load it with
  appropriate headers for From, To, and Subject fields.
3.  Add your message body.
4.  Send the message using the SMTP server object.





ValueError means "I can take this type of data, but not this specific value."
Now, if you write int([42]), that also triggers an exception. Raising TypeError.
TypeError means "I can't accept the type of data you're trying to give me."
When you memorize these meanings deeply, and the difference between them, what do you get?
Clarity.




Basically every function should either do display or logic. If its
doing logic then return values that the caller can use/display.

Various formatting options:
I like C printf style for conciseness and the new format
strings(f"...") look promising although I haven't used them yet.

The format() method is too cumbersome for my taste although it does
offer some extra features over printf. (Although I suspect they
could be incorporated into printf with a bit of thought)

-- 
Alan G


I tend to use % formatting with my debugging statements and log messages (which use %-formatting out of the box anyway). Eg:

   warning("badness! foo=%r", foo)

which will render "badness! foo=%r"%foo if the emit method fires. And in the same pattern my Pfx() message prefixer uses implicit percent formatting like the logging calls do:

   with Pfx("mkdir(%r)", dirpath):
     os.mkdir(dirpath)

which will render "mkdir(%r)"%dirpath is the prefix is used.

I do use modern f"{foo} blah" format strings something. They're particularly handy for template style strings because it is so easy to directly control where values land in the output. For example, I'm working on something at present which accepts a "-o format_string" command line option which lets the user specify the output message filled in from stuff from the programme.

Cheers,
Cameron Simpson <cs@cskk.id.au>

For me, as an old C programmer, the printf-style formatting style is
fine, I'm used to it - that's where Python's syntax came from.  If that
were the only style available, I'm pretty sure that would be holding
Python back, and that's almost certainly the reason other methods have
developed.

I sure wish they'd thought of f-strings before inventing the .format
method, that's the one we could do without - because it doesn't fix one
of the two big problems with string formatting, that of having to match
up the arguments with the format string.  How many of us get that wrong
over and over when there's a lengthy list of args?

msg = "error %d, file %s line %d" % (e, f, l)
msg = "error {}, file {} line {}".format(e, f, l)

wow, what a difference!! :(

I constantly find myself realizing I needed to print out one more value,
and then forget to add the corresponding entry to the tuple or format
args, and get a traceback...

But:

msg = f"error {e}, file {f}, line {l}"

and for quick debug prints (yeah, yeah, I know - don't debug with
prints, use proper logging):

print(f"error {e=}, file {f=}, line {l=}")

which shortcuts having to manually write the name of the variable
together with the the value, i.e. it is sugar for:

print(f"error e={e}, file f={f}, line l={l}")

which obviously matters more when you use proper identifier names that
are more than one character!

all the format-specificiers are possible, e.g. I can write the number 10
as a float with two digits on the rhs:

print(f"{10:.2f}")
10.00

and full expressions are possible within the braces {}

f-strings are definitely my preference - keeping what you're
interpolating into the string closely coupled with how you're doing so
just seems like a massive win in readability, maintainanbility, etc.

mats@wichmann.us

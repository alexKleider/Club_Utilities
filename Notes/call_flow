ck_data => ck_data_cmd =>
    sets up club = Club() with SPoT file names
    and then calls data.ck_data(club, report_status=args['-s'])
  data.ck_data =>
    gather_membership_data(club)
        sets up 1. club.email_by_m (dict of sets)
                2. club.stati_by_m (dict of sets)
                3. club.fee_category_by_m (dict of lists)
                4. club.ms_by_email (dict of lists)
                5. club.ms_by_status (dict of lists)
                6. club.ms_by_fee_category (dict of lists)
                7. club.malformed (list)
                8. club.without_email (list)
                9. club.napplicants (counter set to 0)
        member:
            traverse_records:
                add2email_data => 1, 4, 8
                add2fee_data => 3, 6
#!#             add2status_data => 9, 2, by_status vs 5    #!#
                add2malformed => 7
    gather_contacts_data(club)
        sets up club.gmail_by_name (dict of strings)
                club.groups_by_name (dict of sets)
                club.g_by_email (dict of sets of names)
                club.g_by_group (dict of sets of names)
        reads contacts.csv calling get_gmail_record(g_rec) for each
        get_gmail_record extracts data: gname, g_email, groups
        populates the 4 club attributes
    extra_fees_info = gather_extra_fees_data(f, without_fees=True)
    a_applicants = gather_applicant_data(f)['applicants']
        add2problems(...)
    sets up dangling_m_emails
            shared_m_emails

show => show_cmd
    assign club attributes: 
        pattern, infile,
        errors,
        members, nmembers,
        by_n_meetings, napplicants,
    member:
        traverse_records:
            add2list4web ==> errors,
                members, nmembers,
                by_n_meetings, napplicants
        show_by_status
    output

report => report_cmd => report
    instantiate club & assign attributes:
        by_status
        nmembers
    assign infile & applicant_spot
    member:
      traverse_records
        add2status_data => by_status
        increment_nmembers
    data.gather_applicant_data(spot, include_dates=True)
    helpers.show_dict
    helpers.next_first_friday

stati => stati_cmd => stati



usps =>

extra_charges =>
[-O -r -f <format> -i <infile> -o <outfile> -j <jsonfile>]
<format>: table (the default,) listing (SPoT,) listings.

payables =>

show_mailing_categories =>

prepare_mailing => prepare_mailing_cmd => 
    assign club attributes:
        easy, owing_only, which, lpr, email(_template), letter,
        input_file_name, json_file_name, dir4letters, json_data
    & call club methods:
        check_dir4letters, check_json_file
    member.prepare_mailing(club)
        traverse_records applying 'funcs' specified in content.py
            std_mailing, 
            set_owing, ???
            request_inductee_payment,



display_emails =>

send_emails =>

print_letters =>

emailing =>

restore_fees =>

fees_intake =>

labels =>

envelopes =>


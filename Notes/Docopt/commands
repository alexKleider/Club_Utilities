Commands:
    When run without a command, suggests ways of getting help.
    ck_data: Checks all the club's data bases for consistency.
        Assumes (user must assert) a fresh export of the gmail
        contacts list. Options:
        | -d  Include fee inconsistencies (which are expected
        when some have paid.)
    show: Returns membership demographics a copy of which can then
        be sent to the web master for display on the web site.
    names_only: Returns a listing of members and applicants- names
        and phone numbers only, without any other demographics.
        If -w is 0, output is a single column, otherwise tabular.
    report: Prepares a 'Membership Report".
    stati: Returns a listing of stati (entries in 'status' field.)
        <mode> if set can be 'applicants' (Applicants only will be
            shown) or a glbs.SEPARATOR separated set of stati
            (indicating which stati to show.)
        May also include any combination of -D, -M, -S to
        include adress/demographics, meeting dates &/or sponsors
        for applicants.
    usps: Creates a csv file containing names and addresses of
        members without an email address who therefore receive Club
        minutes by post. Also includes any one with a 'be' or an 's'
        status (... a mechanism for sending a copy to the secretary.)
    extra_charges: Reports on members paying extra charges (for
        kayak storage, mooring &/or dock usage.)
        | -f <format>  -specify listing, listings or table format.
        | -w <width>  -specify maxm # of chars per line in output.
        | -j <json_file>  -creat a json file. (This was
        but is no longer required by the restore_fees_cmd.)
    payables: Reports on non zero money fields.
        | -T  Present as a table rather than a listing.
        | -w <width>  Maximum number of characters per line if -T.
    show_mailing_categories: Sends a list of possible entries for the
        '--which' parameter required by the prepare_mailings command.
        (See the 'content_types' dict in content.py.)
    prepare_mailing:  Demands a <--which> argument to specify the
        content and the custom function(s) to be used.  Try the
        'show_mailing_categories' command for a list of choices.
        The command line arguments may end with zero or more names
        of files which are to be added as attachments to the emails.
        Other parameters have defaults set.
        '--oo'  Send request for fee payment only to those with an
        outstanding balance.  This is relevant only to mailings
        relating to dues and fees. Without this option mailings go
        to all members (including those with credit or 0 balance.
        '-p <printer>' specifies printer to be used for letters.
        '-i <infile>' membership data csv file.
        '-j <json_file>' where to dump prepared emails.
        '--dir <mail_dir>' where to file letters.
    thank:  Reads the file specified by -t <thank>, applies payments
        specified there in to the -i <infile> and prepares thank you
        letter/email acknowledging receipt of payment and showing
        current balance(s.) See prepare_mailing command for further
        details.
    display_emails: Provides an opportunity to proof read the emails.
    send_emails: Sends out the emails found in the -j <json_file>.
        Each mta has its own security requirements and each emailer
        has its own way of implementing them. Check the
        Notes/emailREADME for details.  Note that not all
        combinations of mta and emailer are working but the following
        does: "--mta clubg --emailer python". (./Notes/Mail/msmtprc.)
    print_letters: Sends the files contained in the directory
        specified by the --dir parameter.  Depricated in favour of
        simply using the lpr utility: $ lpr ./Data/MailDir/*
    restore_fees: Use this command to populate each member's record
        with what they will owe for the next club year. Respects any
        existing credits. Best done after all dues and fees have been
        paid. (Will abort if any dues or fees are still outstanding.)
        Results are either placed into a file specified by the '-o'
        option (if provided) or placed into a file named as a
        concatination of "new_" and the input file. One can then
        mannually check the new file and rename it if all is well.
    emailing: Initially developed to allow sending of attachments.
        Since attachments are now possible using the send_mailing
        command (at least with emailer python) this command will
        most likely be redacted.
    fee_intake_totals: Input file should be a 'receipts' file with a
        specific format. It defaults to 'Data/receipts-YYYY.txt'
        where YYYY is the current year.  Output yields subtotals and
        the grand total which can be copy/pasted into the 'receipts'
        file.
    labels: print labels.       | default: -P A5160  | Both
    envelopes: print envelopes. | default: -P E000   | redacted.
    wip: "work in progress" Used for development/testing.
